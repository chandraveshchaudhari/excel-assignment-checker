import openpyxl
import os
import pandas as pd
from collections import defaultdict


def get_all_excel_filenames(folder_path):
    files = os.listdir(folder_path)
    excel_files = []
    for f in files:
        if f.endswith('.xlsx'):
            excel_files.append(f)
    print(f"Found {len(excel_files)} excel files to evaluate.")
    return excel_files


def check_value(cell_address, worksheet):
    print(f"value is {worksheet[cell_address].value}")
    return worksheet[cell_address].value


def check_data_type(cell_address, worksheet):
    print(f"data type is {worksheet[cell_address].data_type}")
    return worksheet[cell_address].data_type


def empty_data_structure():
    data_structure = dict()
    data_structure['Name'] = None
    data_structure['Roll Number'] = None
    data_structure['Result'] = 0
    data_structure['Error Sum'] = 0
    data_structure['Value Sum'] = 0
    data_structure['Formula Sum'] = 0

    return data_structure


def check_specific_answers(empty_data, column_name, row_number, number_of_question, formula_worksheet, value_worksheet,
                           values_answer_key, formula_answer_key):
    for i in range(number_of_question):
        cell_address = column_name + str(row_number + i)
        print(f"        checking cell:     [{cell_address}]")

        print(f"Checking value generated by formula.")
        value = check_value(cell_address, value_worksheet)
        if value in (
                "#N/A", "#DIV/0", "#N/A", "#NAME?", "#NULL!", "#NUM!", "#REF!", "#VALUE!", "#####",
                "Circular Reference"):
            print(
                f" Not even checking the formula because it shows >>{check_value(cell_address, value_worksheet)}<<")
            empty_data['Error Sum'] += 1
            print(f"Your ERROR count increased: {empty_data['Error Sum']}")
            continue

        if cell_address in values_answer_key:
            if value == values_answer_key[cell_address]:
                empty_data['Value Sum'] += 1
                print(f"Your VALUE count increased: {empty_data['Value Sum']}")
            else:
                continue

        if cell_address in formula_answer_key:
            print(f"Checking formula")
            formula_string = check_value(cell_address, formula_worksheet)

            if formula_string is str and \
                    formula_string.startswith(formula_answer_key[cell_address]):
                empty_data['Formula Sum'] += 1
                print(f"Your FORMULA count increased: {empty_data['Formula Sum']}")
            else:
                continue
        if not (cell_address in values_answer_key and cell_address in formula_answer_key):
            continue

        empty_data['Result'] += 1
    return empty_data


def evaluate_excel_file(file_path, column_name, row_number, number_of_question, values_answer_key, formula_answer_key,
                        worksheet_name='Answers', student_name_cell='B1', student_roll_no_cell='B2'):
    print("-" * 40)
    print("-" * 40)
    if file_path:
        print(f"working with {file_path}")
    else:
        print("No file_path")
        return

    try:
        formula_wb = openpyxl.load_workbook(file_path)
    except:
        print(f"Could not find the {file_path}")
        return

    try:
        formula_worksheet = formula_wb[worksheet_name]
    except KeyError:
        print("sheet named 'Answers' must be there and contain answers.")
        return

    try:
        value_wb = openpyxl.load_workbook(file_path, data_only=True)
    except:
        print(f"Could not find the {file_path}")
        return

    try:
        value_worksheet = value_wb[worksheet_name]
    except KeyError:
        print("sheet named 'Answers' must be there and contain answers.")
        return

    try:
        name = check_value(student_name_cell, formula_worksheet)
    except:
        print(f'Could not find your official Name in B1.')
        return
    print(name)
    try:
        roll_no = check_value(student_roll_no_cell, formula_worksheet)
    except:
        print(f'Could not find your roll number in B2.')
        return

    print(roll_no)

    result_data = check_specific_answers(empty_data_structure(), column_name, row_number, number_of_question,
                                         formula_worksheet, value_worksheet, values_answer_key, formula_answer_key)
    result_data['Name'] = name
    result_data['Roll Number'] = roll_no

    print(result_data)
    print("*" * 40)

    return result_data


class CheckExcelFiles:
    def __init__(self, folder_path, formula_answer_key, values_answer_key):
        self.values_answer_key = values_answer_key
        self.path = folder_path
        self.formula_answer_key = formula_answer_key

    def evaluate_all_excel_files(self, column_name, row_number, number_of_question, values_answer_key,
                                 formula_answer_key):
        result_data_list = []
        excel_filenames = get_all_excel_filenames(self.path)

        for filename in excel_filenames:
            file_path = os.path.join(self.path, filename)
            data = evaluate_excel_file(file_path, column_name, row_number, number_of_question, values_answer_key,
                                       formula_answer_key)
            result_data_list.append(data)
        df = pd.DataFrame.from_records(result_data_list)

        return df
